#!/usr/bin/env bash

# check if docker command is available
if ! command -v docker &> /dev/null
then
    echo "! Power TAC Experiment Manager is depending on the 'docker' command which doesn't seem to be installed.
! Please check README.md for installation instructions."
    exit 1
fi

# check if docker compose is available
if ! docker compose &> /dev/null
then
    echo "! Power TAC Experiment Manager is depending on the 'docker compose' plugin which doesn't seem to be installed.
! Please check README.md for installation instructions."
    exit 1
fi

# format list of strings for use in usage info messages
list_options() {
  for s in "$@"; do
    printf "    %s\n" "$s"
  done
}

# tries to load vars from experiment manager .env file
load_env() {

  cwd=$PWD
  dir="$1"
  filename="$2"

  # switch to em dir to resolve pwd correctly
  cd "$dir" || exit 1

  # check if file exists
  if [ ! -f "$filename" ]; then
    echo "! .env file does not exist in '$em_dir/$filename'.
! Please check the README for details."
    exit 1
  fi

  # load variables
  # shellcheck source=.env
  source "$filename"

  # shellcheck disable=SC2164
  cd "$cwd"
}

em_containers=("powertac-orchestrator" "powertac-web-client" "powertac-weather-server" "powertac-orchestrator-db" "powertac-weather-db")

# checks if containers exist
containers_exist() {
  all_exist=1
  for container_name in "$@"; do
    if docker container inspect "$container_name" >& /dev/null; then
      echo " + service container $container_name exists"
    else
      echo " - service container $container_name does not exist"
      all_exist=0
    fi
  done
  if [ $all_exist -eq 0  ]; then
    return 1
  fi
}

general_usage_message="Usage: experiment-manager <COMMAND>

COMMANDS
    pull      pulls service images
    setup     sets up the services
    status    shows service container status
    start     starts the services
    stop      stops the services
    restart   restarts the services
    remove    removes the services
    purge     removes the services and data directory (may require root privileges)
    help      shows usage information
              use 'experiment-manager <COMMAND> help' to show command specific usage information"

command="$1"

# show help message
if [ -z "$command" ] || [ "$command" == "help" ]; then
  echo "$general_usage_message"
  exit 0
fi

# pull command
if [ "$command" == "pull" ]; then
  available_services=('orchestrator' 'web-client' 'weather-server' 'server' 'log-processor' 'analysis')
  pull_usage_message="Usage: experiment-manager pull [<SERVICE>] [<VERSION>]

SERVICES
    all             (default) pulls images for all managed services
$(list_options "${available_services[@]}")

VERSION
    image version; use 'latest' for latest stable version
    available versions can be found here https://github.com/orgs/powertac/packages"

  # parse service id
  service="$2"
  if [ -z "$service" ]; then
    service="all"
  fi

  # parse version name
  version="$3"
  if [ -z "$version" ]; then
    version="latest"
  fi

  # show help message
  if [ "$service" == "help" ]; then
    echo "$pull_usage_message"
    exit 0
  fi

  # pull all specified images
  for container_name in "${available_services[@]}"; do
    if [ "$service" == "$container_name" ] || [ "$service" == "all" ]; then
      service_matched=1
      image_id="ghcr.io/powertac/$container_name:$version"
      if docker pull "$image_id"; then
        printf "\n"
      else
        echo "! ERROR: could not pull '$image_id'"
        exit 1
      fi
    fi
  done

  # show error for unknown service
  if [ ! $service_matched ]; then
    echo "! Unrecognized service '$service'
! Use 'experiment-manager pull help' for usage information"
    exit 1
  fi

  exit 0
fi

# the following commands are path dependant; em_dir resolves to powertac-experiment-manager root dir
em_dir=$( dirname -- "$( readlink -f -- "$0"; )"; )

# first time setup
if [ "$command" == "setup" ]; then

  # load vars from env file
  if ! load_env "$em_dir" ".env"; then
    exit 1
  fi

  # pull latest service versions specified in .env
  docker compose --project-directory "$em_dir" pull --policy always
  docker pull ghcr.io/log-processor:"$EM_LOGPROCESSOR_VERSION"
  docker pull ghcr.io/analysis:"$EM_ANALYSIS_VERSION"

  # create service according to compose.yml and .env
  docker compose --project-directory "$em_dir" up --detach

  echo "
+ Services created!
+ Please wait a bit to allow the services to setup their respective environments.
+ The web client should be available shortly (http://$EM_HOST:$EM_WEB_CLIENT_HOST_PORT)."
  exit 0
fi

# service control commands can be relayed directly to docker compose
if [ "$command" == "start" ] || [ "$command" == "restart" ] || [ "$command" == "stop" ]; then
  if ! containers_exist "${em_containers[@]}"; then
    echo "
! One or more service containers are not set up.
! Use the 'setup' command to setup the experiment manager services."
    exit 1
  fi
echo "what"
  docker compose --project-directory "$em_dir" "$command"
  exit 0
fi

# for now status is an alias for 'docker compose ps'
if [ "$command" == "status" ]; then
  docker compose --project-directory "$em_dir" ps
  exit 0
fi

# remove only removes the service containers
if [ "$command" == "remove" ]; then
  docker compose --project-directory "$em_dir" down
  exit 0
fi

# purge removes the service containers and the data directory (default: ${PWD}/.powertac)
if [ "$command" == "purge" ]; then

  if ! load_env "$em_dir" ".env"; then
    exit 1
  fi

  # if poorly configured, this command might affect parts of the system outside of the EM scope
  # therefor: get user confirmation!
  echo "This command will remove the following resources WITHOUT ANY RECOVERY OPTIONS:
 - the directory '$EM_ROOT_PATH'
 - all service containers
 "
  read -p "Are you sure Ã½ou want to continue? [y/n] " -r

  if [[ $REPLY =~ ^[Yy]$ ]]; then
    docker compose --project-directory "$em_dir" down
    rm -rfv "${EM_ROOT_PATH}"
  fi
  exit 0
fi

echo "! Unrecognized command '$command'
! Use 'help' command to show usage information"
exit 1